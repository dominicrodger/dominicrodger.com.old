<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>dominicrodger.com</title><link href="http://dominicrodger.com/" rel="alternate"></link><link href="http://dominicrodger.com/feeds/code.atom.xml" rel="self"></link><id>http://dominicrodger.com/</id><updated>2012-12-26T20:09:00+00:00</updated><entry><title>Forays into Responsive Design</title><link href="http://dominicrodger.com/responsive-beginnings.html" rel="alternate"></link><updated>2012-12-26T20:09:00+00:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-12-26:responsive-beginnings.html</id><summary type="html">&lt;h1&gt;The Project&lt;/h1&gt;
&lt;p&gt;A good friend of mine alters cards for &lt;em&gt;Magic: The Gathering&lt;/em&gt; for fun
and profit. Previously, he posted them on his
&lt;a href="http://www.twitter.com/JamesTMS" title="James' Twitter Feed"&gt;Twitter feed&lt;/a&gt;, along with a brief description, but
that doesn't provide a great way of seeing at a glance the sort of
things he does - a place to point people who ask for examples of his
work.&lt;/p&gt;
&lt;p&gt;Initially, I suggested &lt;a href="http://www.flickr.com" title="Flickr: A photo-sharing site"&gt;Flickr&lt;/a&gt;, but it didn't do quite what
he wanted. Since I had a few hours to spare, I did what any
self-respecting engineer would do, and offered to build something. I
launched the resulting site today:
&lt;a href="http://www.griffinalters.com" title="Take a look at griffinalters.com - my first responsive site"&gt;griffinalters.com&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Since it was a fairly simple site, which basically has only one
interesting page, I thought now was as good a time as any to get
started down the &lt;a href="http://www.alistapart.com/articles/responsive-web-design/" title="Read Ethan Marcotte's seminal essay on Responsive Web Design, 2010"&gt;responsive design&lt;/a&gt; path.&lt;/p&gt;
&lt;h1&gt;Bootstrap First&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;NB. You'll probably understand the rest of this article better if you
 take a look at &lt;a href="http://www.griffinalters.com" title="Take a look at griffinalters.com - my first responsive site"&gt;griffinalters.com&lt;/a&gt; first.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I started off by using the grid that Bootstrap gives you, along with
the extra responsive CSS file (&lt;code&gt;bootstrap-responsive.css&lt;/code&gt;). The card
on the left-hand side was a &lt;code&gt;span4&lt;/code&gt;, and the card thumbnails on the
right-hand side were each &lt;code&gt;span2&lt;/code&gt;s. This worked - sort of. On large
enough screens (basically screens at least 768px wide), I'd get the
"featured" card on the left-hand side, and the list of thumbnails on
the right-hand side. The problem with this was that it was all or
nothing - above 768px it'd look like the full desktop site, below
768px, it'd just be a single column - with a single thumbnail on each
row below the featured image.&lt;/p&gt;
&lt;h1&gt;Hey, look! No span[0-9]!&lt;/h1&gt;
&lt;p&gt;What I really wanted was the featured card on the left, and a set of
thumbnails on the right, which remained unless there was no space for
thumbnails at all, at which point the thumbnails would drop beneath
the featured card. So, I started from scratch - here is the source for
the list of thumbnails&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;float: left; margin-right: 20px&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card1-thumbnail.jpg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works more or less as intended&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; - the wider the viewport, the more
thumbnails there'll be on any given row.&lt;/p&gt;
&lt;p&gt;To position the primary card, I floated it left, and wrapped the
thumbnails:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width: 400px; float: left&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card1-primary.jpg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;margin-left: 420px&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thumbnail&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card1-thumbnail.jpg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thumbnail&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;card2-thumbnail.jpg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works great for displays bigger than 420px, but the &lt;code&gt;margin-left&lt;/code&gt;
means that if we can't fit any thumbnails to the right of the featured
card, then we end up having a blank space to the left of our
thumbnails.&lt;/p&gt;
&lt;p&gt;To fix this, we scope the &lt;code&gt;margin-left&lt;/code&gt; rule to "reasonably large"
displays. We give the wrapper around our thumbnails the class
"additional-cards", and then in our CSS file we write:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;420px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.additional-cards&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;420px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This means that we only apply the left margin to our list of
thumbnails if our viewport is at least 420px&lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;This gets us a bit closer - but doesn't work very well for displays
only slightly wider than 420px - we still end up with the margin to
the left of our list of thumbnails, but if there's not space to the
right of our featured image for at least one thumbnail, we're back to
the earlier problem, where the containing element for the list of
thumbnails gets pushed below our featured image, and has a blank space
to the left. This is easily fixed by adjusting our &lt;code&gt;min-width&lt;/code&gt; to
768px, or something similar:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;768px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.additional-cards&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;420px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;min-height too!&lt;/h1&gt;
&lt;p&gt;One slight irritation is that once you've got enough thumbnails, as
you scroll down, the featured image scrolls off the page, and the
thumbnails again have a large empty space to the left of them.&lt;/p&gt;
&lt;p&gt;One way to fix this is with &lt;code&gt;position: fixed&lt;/code&gt;, but this causes
problems for browsers which aren't tall enough to display the entire
featured image and its description - since they're not visible in the
browser's viewport at load time, and you can't scroll to see the rest
of it.&lt;/p&gt;
&lt;p&gt;For this site, we know that all images are 350px high, so we probably
need a viewport about 600px high to see the image and its associated
description:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;min-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;600px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.primary-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's almost it: there's a tiny bit more to our responsive
layout, but not a great deal - you can take a look at
&lt;a href="https://raw.github.com/dominicrodger/squigcards/master/static/squigcards/css/base.css" title="View the CSS that lays out griffinalters.com"&gt;the CSS&lt;/a&gt;. If you're interested - all the code that powers
the site is on &lt;a href="https://github.com/dominicrodger/squigcards" title="View the source for griffinalters.com"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Concluding Thoughts&lt;/h1&gt;
&lt;p&gt;All this was complicated enough to get (hopefully largely) right on a
site that is effectively just a single page site - but hopefully the
things I've learned in the attempt will be useful as I work on more
complex sites too.&lt;/p&gt;
&lt;p&gt;If you've spotted things I've done wrong - feel free to send me a pull
request, or ping me on &lt;a href="http://www.twitter.com/dominicrodger" title="View my Twitter profile"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;You'll have to excuse the somewhat basic theming of
  &lt;a href="http://twitter.github.com/bootstrap/" title="Twitter Bootstrap"&gt;Bootstrap&lt;/a&gt; - it uses a fairly unchanged version of
  the &lt;a href="http://bootswatch.com/cyborg/" title="The Cyborg theme for Bootstrap"&gt;Cyborg theme&lt;/a&gt;.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;In real life, I didn't use inline styles, hopefully you get the
  idea.&amp;#160;&lt;a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;The "less" is for the fact that I can't find a neat way to
  remove the right margin on the last element in each row. This
  means that the last thumbnail in each row can't get any closer
  than 20px from the right hand side of the containing element. I
  know it's possible to figure this out in JavaScript, but I'm not
  sure it's worth the effort.&amp;#160;&lt;a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Yes, I know this isn't a large enough &lt;code&gt;min-width&lt;/code&gt; - we'll get
  there in a moment.&amp;#160;&lt;a href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Moving to Ubuntu for mobile development</title><link href="http://dominicrodger.com/ubuntu-netbook.html" rel="alternate"></link><updated>2012-07-09T17:46:00+01:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-07-09:ubuntu-netbook.html</id><summary type="html">&lt;h1&gt;My mobile office&lt;/h1&gt;
&lt;p&gt;My web-development office is a fast-moving place.&lt;/p&gt;
&lt;p&gt;It averages around 50 miles per hour&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, and I work on a laptop
normally squished between two people on the train to and from the
office.&lt;/p&gt;
&lt;p&gt;When I happen to have a spare moment to build websites at home, I tend
to use my desktop, which is running Ubuntu. I do my editing in emacs,
where I've gradually got things set up more or less as I like them.&lt;/p&gt;
&lt;p&gt;On my laptop that I've been using on the train, I'm working in
Notepad++, because I've never got around to installing emacs on
Windows.&lt;/p&gt;
&lt;h1&gt;Hurrah for tiny laptops&lt;/h1&gt;
&lt;p&gt;I've recently (re-)acquired an Asus Aspire One. It's a pretty cheap
computer that I bought about 3 years ago. I gradually stopped using
it, as it tended to be too slow to do much with (it came with Windows
Vista, which may not have helped).&lt;/p&gt;
&lt;p&gt;It's really quite a lot better as a portable laptop than the rather
heavy Dell I was using - mostly because it's light, it's narrower
(which is good for the fairly small seats on the train), and its
battery lasts for approximately a millennium.&lt;/p&gt;
&lt;p&gt;Having got used to (and grown rather fond of) Ubuntu on my desktop, I
thought it was worth a go trying it on my Aspire One. It's taken me
several hours (most of which was spent watching progress bars and a
&lt;a href="http://www.bbc.co.uk/sport/0/tennis/18755331" title="Roger Federer beat Andy Murray in 4 sets"&gt;tragically inevitable Wimbledon final&lt;/a&gt;), so I thought
I'd write up how I got it working, partly in case I ever need to do it
again.&lt;/p&gt;
&lt;h1&gt;Pain&lt;/h1&gt;
&lt;p&gt;First, I tried downloading the latest release of Ubuntu (12.04),
dumping it on a USB stick, and booting from that. I quickly got into
Ubuntu, only to get an &lt;code&gt;io-remap&lt;/code&gt; error, at which point the bottom of
the screen went black, and the top half of the screen tried to display
both halves simultaneously. I went through the installation process
anyway&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, hoping the problem would go away. It didn't.&lt;/p&gt;
&lt;p&gt;Next, I thought I'd try Linux Mint. Same thing, no dice.&lt;/p&gt;
&lt;p&gt;Next, I did some reading, and discovered that I'd bumped into a known
issue, which may or may not be fixed in the latest pre-release of
Ubuntu (12.10). I downloaded that. Also no dice.&lt;/p&gt;
&lt;p&gt;Next, I read some workarounds for Ubuntu 12.04, so I re-installed and
tried those. Still no dice.&lt;/p&gt;
&lt;p&gt;I tried Linux Mint again, tweaking some display options. Still no luck.&lt;/p&gt;
&lt;p&gt;Then, I tried Ubuntu 12.04 again, and discovered that if I hit quit
when asked whether I wanted to install Ubuntu 12.04, the screen would
redraw, and everything looked fine. I installed, went to restart, and
was presented with a pitch black screen.&lt;/p&gt;
&lt;p&gt;I discovered then that Ctrl-Alt-F1 got me a terminal&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, but that
wasn't going to help me build websites. I installed some things just
for fun.&lt;/p&gt;
&lt;p&gt;Googling around brought me to &lt;a href="http://askubuntu.com/a/130847" title="Ask Ubuntu - fixing the black screen problem"&gt;this answer&lt;/a&gt;, which told me
to type the magic incantation at the prompt:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;lightdm&lt;/span&gt; &lt;span class="n"&gt;restart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A &lt;a href="http://blog.bodhizazen.net/linux/ubuntu-12-04-gma500-poulsbo-boot-options/" title="The blog post that got me fixed"&gt;blog post&lt;/a&gt; linked from that answer told me to edit
&lt;code&gt;/etc/default/grub&lt;/code&gt; and add this line (in place of the previous
setting of &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;quiet&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tty1&lt;/span&gt; &lt;span class="n"&gt;acpi_backlight&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="n"&gt;acpi_osi&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Linux&lt;/span&gt; &lt;span class="n"&gt;acer_wmi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blacklist&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;1920&lt;span class="n"&gt;mb&lt;/span&gt;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once I'd done that, it all worked.&lt;/p&gt;
&lt;p&gt;Not for the first time, I had a feeling that I didn't really know what
I was doing (though I am of course very happy to be using my vendor's
acpi_backlight, I hope he doesn't mind).&lt;/p&gt;
&lt;p&gt;Admittedly my laptop's a little old (I think it came out three
years ago or so), but that was a serious amount of pain just to get
things working. Now I've got things working, it's great, but I can't
help wondering how many people would have been sufficiently stubborn
to get this far. I had a similarly painful experience upgrading my
Desktop from Ubuntu 11 to Ubuntu 12, so maybe I've just got really,
really bad luck.&lt;/p&gt;
&lt;h1&gt;Good Things&lt;/h1&gt;
&lt;p&gt;All this means that the editing environment I use on my laptop is now
identical to the one I use on my desktop. I've synced my emacs
configurations with Dropbox, and logged in to Google Chrome so my
bookmarks are synced. I now get to work in a development environment
where I can use &lt;a href="http://www.doughellmann.com/projects/virtualenvwrapper/" title="virtualenvwrapper - for, erm, wrapping your virtualenvs"&gt;virtualenvwrapper&lt;/a&gt; and where most
things are pip-installable. Even better, I didn't have to spend a load
of money on a Macbook Air, and I get to retain my free-software
smugness.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;As far as speed goes at least. Its average velocity, my A-level
  physics teacher would probably wish me to point out, is roughly
  0 miles per hour.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;The top half of the screen would redraw to display whatever your
  mouse was on, which made progress a challenge, but not impossible.&amp;#160;&lt;a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;A couple of people seemed surprised that I didn't know that - I
  guess it's the sort of thing you learn once and then just
  assume.&amp;#160;&lt;a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Avoiding database queries with Haystack</title><link href="http://dominicrodger.com/order-n-haystack.html" rel="alternate"></link><updated>2012-07-05T17:20:00+01:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-07-05:order-n-haystack.html</id><summary type="html">&lt;h1&gt;Order(n) is a pretty bad idea.&lt;/h1&gt;
&lt;p&gt;Originally, my SearchIndexes for &lt;a href="http://haystacksearch.org/" title="Haystack is a search solution for Django apps"&gt;Haystack&lt;/a&gt; looked a bit
like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegularEventIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchIndex&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, when someone ran a search, and I wanted to display a result, I'd
load up a template (which template I loaded depended on grabbing the
model name, as recommended in &lt;a href="http://django-haystack.readthedocs.org/en/v1.2.7/best_practices.html#content-type-specific-templates" title="Use a filter to generate the template name for your search results."&gt;the docs&lt;/a&gt;), and any
attributes of the model I wanted to display required doing a database
lookup to fetch the data, like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ result.object.title }}&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
{{ result.object.details|linebreaks }}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This has a fairly obvious problem - each time you display a search
result, you do a database query.&lt;/p&gt;
&lt;h1&gt;Better - avoiding database lookups&lt;/h1&gt;
&lt;p&gt;I tried avoiding that problem like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegularEventIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchIndex&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;modified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;modified&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;details&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which meant writing templates like this&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ result.title|safe }}&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
{{ result.details|safe|linebreaks }}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The downside of this was that any attributes of the model I wanted to
display had to be hooked up in the &lt;code&gt;SearchIndex&lt;/code&gt;. This was made worse
by the fact that you had to remember to keep whether or not a
particular field could be null in sync between the model and the
&lt;code&gt;SearchIndex&lt;/code&gt; (spot the &lt;code&gt;null=True&lt;/code&gt; in the &lt;code&gt;details&lt;/code&gt; attribute above).&lt;/p&gt;
&lt;h1&gt;Betterer - pre-render search result templates&lt;/h1&gt;
&lt;p&gt;At the point when the index is built, templates have access to the
model instance. This doesn't involve any extra queries (we already had
to load the instance to generate the index for it), and is done once
per object change (instead of once per inclusion in search results),
which is probably a win for most sites.&lt;/p&gt;
&lt;p&gt;So, I added a field to my &lt;code&gt;SearchIndex&lt;/code&gt; that looked like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegularEventIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchIndex&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;modified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;modified&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rendered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;use_template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then moved my template that was previously used to render search
results on the fly, to the location used by Haystack to look for
search templates
(&lt;code&gt;search/indexes/kanisa/&amp;lt;object_name&amp;gt;_rendered.txt&lt;/code&gt;). In that template
I have full access to the model (i.e. I can call methods on it, which
wasn't possible without a database query before).&lt;/p&gt;
&lt;p&gt;My new template looks like this&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ object.title }}&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
{{ object.details|linebreaks }}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Best - do all this stuff in a base class&lt;/h1&gt;
&lt;p&gt;Once I'd added my new &lt;code&gt;rendered&lt;/code&gt; attribute to my various
SearchIndexes, I realised that all my SearchIndexes were more or less
the same. I no longer needed all the attributes on them which I had
before (since they were only there to avoid database lookups when
generating templates on the fly), so I could now just have a base
&lt;code&gt;SearchIndex&lt;/code&gt;, which would be fine for most my models&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KanisaBaseSearchIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchIndex&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rendered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;use_template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_updated_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;modified&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Almost all my models can use this as is, which makes adding new models
to my site search just a case of registering them in
&lt;code&gt;search_indexes.py&lt;/code&gt; and adding two templates (&lt;code&gt;&amp;lt;object_name&amp;gt;_text.txt&lt;/code&gt;
for the searchable content, and &lt;code&gt;&amp;lt;object_name&amp;gt;_rendered.txt&lt;/code&gt; for the
displayable search result).&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This took me a while to figure out, but attributes going in to
  Haystack have already been escaped once, so need to be marked as
  &lt;code&gt;safe&lt;/code&gt;.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;This is the same as the template above, I've just replaced
  &lt;code&gt;result.object&lt;/code&gt; with &lt;code&gt;object&lt;/code&gt;.&amp;#160;&lt;a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;A couple of them have custom titles, which is an attribute I
  access directly on search results.&amp;#160;&lt;a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Faster Django Tests</title><link href="http://dominicrodger.com/faster-django-tests.html" rel="alternate"></link><updated>2012-06-10T07:11:00+01:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-06-10:faster-django-tests.html</id><summary type="html">&lt;p&gt;A &lt;a href="http://www.dominicrodger.com/tdd-django-south.html" title="Read my original post on making test runs in Django faster"&gt;long while ago&lt;/a&gt;, I discovered that running Django tests
is much faster if you use SQLite, and if you turn off South (this now
seems pretty obvious, but at the time was a bit of a revelation to
me).&lt;/p&gt;
&lt;p&gt;Since then, I've come across a better way of setting this up, to avoid
having a &lt;code&gt;test_settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# If manage.py test was called, use SQLite&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test_sqlite.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That pretty well does what my old approach with &lt;code&gt;test_settings.py&lt;/code&gt;, but
instead of having to type:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;python manage.py &lt;span class="nb"&gt;test&lt;/span&gt; --settings&lt;span class="o"&gt;=&lt;/span&gt;test_settings
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can now just type:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;python manage.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the faster settings get loaded.&lt;/p&gt;
&lt;p&gt;This morning I was perusing
&lt;a href="https://github.com/django/django/commits/master" title="View recent commits to Django"&gt;commits to Django on GitHub&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, when I came across
&lt;a href="https://github.com/django/django/commit/17d6cd90299e39823e80a005e7a04bc24ee8af4c" title="View the commit on GitHub"&gt;this one&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Documented that setting &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; can speed up tests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Turns out there's another way to speed up tests if you're
authenticating users. Now my extra settings that I set if I'm running
tests look like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# If manage.py test was called, use SQLite&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test_sqlite.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;PASSWORD_HASHERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;django.contrib.auth.hashers.MD5PasswordHasher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;django.contrib.auth.hashers.SHA1PasswordHasher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Doing that took a sample run of the tests for my &lt;a href="https://github.com/dominicrodger/kanisa" title="View Kanisa on GitHub"&gt;new project&lt;/a&gt;
down from 3.6s to 1.0s, which is pretty good for 3 lines of code.&lt;/p&gt;
&lt;p&gt;Django uses the first entry in the list for storing passwords, and the
other entries in the list are also available. If you want Django's
test suite to pass, you'll need to include the SHA1 hasher.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This is probably something everyone who works with Django should
  do, it's a great way of finding out what's coming up, and also
  for stumbling across random tips like the one I've not quite got
  to yet.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Travis, You Are Awesome</title><link href="http://dominicrodger.com/build-breaking.html" rel="alternate"></link><updated>2012-04-29T12:27:00+01:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-04-29:build-breaking.html</id><summary type="html">&lt;p&gt;I came across &lt;a href="http://travis-ci.org" title="Find out about Travis CI"&gt;Travis CI&lt;/a&gt; this week, and it's awesome.&lt;/p&gt;
&lt;p&gt;I've got a bunch of tests for &lt;a href="https://github.com/dominicrodger/django-magazine" title="View django-magazine on GitHub"&gt;django-magazine&lt;/a&gt;, but
I'm not very good at running them. It turns out that unit tests aren't
very useful if you don't run them, so I wanted to make sure that every
time I pushed code to it, the tests run. Enter Travis CI.&lt;/p&gt;
&lt;h2&gt;Easy Unit Testing for Reusable Apps&lt;/h2&gt;
&lt;p&gt;django-magazine is a reusable app - that is, it doesn't ship with
settings files, so you can't run its tests just after installing
it&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I wasn't sure what the easiest way to handle this was, so I looked
around for Django reusable apps that were already using Travis, and
stumbled across &lt;a href="https://github.com/stephenmcd/django-forms-builder" title="View django-forms-builder on GitHub"&gt;django-forms-builder&lt;/a&gt;. They'd
solved this by adding an &lt;code&gt;example_project&lt;/code&gt; folder, which had a simple
settings file, a urls file and a &lt;code&gt;manage.py&lt;/code&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;That allows me to run the tests without any extra set-up, though I
still haven't worked out how to allow people who've just installed
from pip&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; to run the tests right out of the box.&lt;/p&gt;
&lt;h2&gt;.travis.yml&lt;/h2&gt;
&lt;p&gt;There are just two things you need to do to get Travis CI working for
your project.&lt;/p&gt;
&lt;p&gt;Firstly - sign in on their website. There's a slightly scary message
about giving it write access to your repositories, but there's a
decent enough reason on the Travis site explaining why they need
it&lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Secondly - add a .travis.yml file to your root directory, commit, and
push to GitHub. Travis CI will pick up your change, and start
building. &lt;a href="https://github.com/dominicrodger/django-magazine/blob/28086f124e6752bad9f78466739673871adb5242/.travis.yml" title="View my .travis.yml file for django-magazine"&gt;My file&lt;/a&gt; currently looks like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.6&amp;quot;&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;DJANGO=1.3.1&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;DJANGO=1.4&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip install -q Django==$DJANGO --use-mirrors&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip install -r requirements.txt --use-mirrors&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip install pep8&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pep8 --exclude=migrations magazine&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;./magazine/example_project/manage.py test magazine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will kick off four builds:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 2.6 and Django 1.3.1;&lt;/li&gt;
&lt;li&gt;Python 2.6 and Django 1.4;&lt;/li&gt;
&lt;li&gt;Python 2.7 and Django 1.3.1;&lt;/li&gt;
&lt;li&gt;Python 2.7 and Django 1.4.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of those will run in parallel, and you'll then get an e-mail with
the status of your build, if it changed (pleasingly, it doesn't e-mail
you for every build - only if the status of it has switched between
fixed and broken). Go take a look at an &lt;a href="http://travis-ci.org/#!/dominicrodger/django-magazine/builds/1199479" title="View a successful build of django-magazine"&gt;example build result&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;--use-mirrors&lt;/code&gt; stuff is an attempt to help Travis CI avoid
overloading PyPI.&lt;/p&gt;
&lt;h2&gt;Bonus Points: PEP-8&lt;/h2&gt;
&lt;p&gt;I've recently discovered PEP-8, which I half knew about, but I'd never
attempted to make my code meet it. Then &lt;a href="https://github.com/joshuajonah/django-magazine" title="View Joshua Jonah's fork of django-magazine"&gt;someone forked&lt;/a&gt;
django-magazine to make it meet PEP-8, and I was shamed into fixing
it. I've added a line to my &lt;code&gt;.travis.yml&lt;/code&gt; file so the build fails if
checked-in code is not PEP-8 friendly.&lt;/p&gt;
&lt;h2&gt;Advertise Your Status&lt;/h2&gt;
&lt;p&gt;Travis CI even provides an image that'll show your current build
status - adding it to my &lt;code&gt;README.md&lt;/code&gt; file allows me to advertise that
(and implicitly, that I'm a bit obsessive) using:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;secure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;travis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dominicrodger&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;magazine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;?&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Currently, that looks like: &lt;a href="http://travis-ci.org/dominicrodger/django-magazine"&gt;&lt;img alt="Build Status" src="https://secure.travis-ci.org/dominicrodger/django-magazine.png?branch=master" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All this is to say, Travis CI is awesome, and you should use it.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This is probably a good time to point out that django-magazine
  is not available on PyPI yet. I've never added anything to PyPI
  before, and there's a couple of things I'd like to sort out
  before doing that.  Firstly I'd like to make sure I've tagged
  things properly, and secondly I need to factor out the book
  review stuff which is currently not tested, and is very specific
  to my particular use case.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;They all had a &lt;code&gt;templates&lt;/code&gt; folder, with a base template, which
  django-magazine doesn't need. That might be because I've done
  something wrong (every template extends &lt;code&gt;magazine/magazine_base.html&lt;/code&gt;,
  which doesn't have much in the way of HTML, but enough that all
  the tests pass &amp;mdash; one of these days I should probably give
  it some simple styles).&amp;#160;&lt;a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;As opposed to &lt;code&gt;git clone&lt;/code&gt;, which is what Travis CI does, which
  means that the &lt;code&gt;example_project&lt;/code&gt; code is in a predictable
  location (also, I've not yet added &lt;code&gt;example_project&lt;/code&gt; to my
  manifest file, so it's not installed by pip).&amp;#160;&lt;a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;em&gt;"Travis CI needs write access for setting up service hooks for
  your repositories when you request it, but it won't touch
  anything else."&lt;/em&gt; &amp;mdash;
  &lt;a href="http://about.travis-ci.org/docs/user/getting-started/" title="View this quote in context"&gt;Getting Started - Travis CI Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'd love there to be a workaround for this, but Travis is
  awesome enough that I mostly just don't care.&amp;#160;&lt;a href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>I Know Nothing</title><link href="http://dominicrodger.com/nothing.html" rel="alternate"></link><updated>2012-04-20T22:52:00+01:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-04-20:nothing.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;See, I know nothing! &amp;mdash; &lt;a href="http://www.imdb.com/character/ch0023128/quotes" title="Manuel, from Fawlty Towers"&gt;Manuel&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I distinctly remember being 17 years old, I'd just finished
re-launching a site for &lt;a href="http://www.oxygen-online.org" title="Find out about Oxygen"&gt;a charity&lt;/a&gt; I was involved with&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;,
and I confidently declared that I knew all there was to know about
building websites. And I believed it.&lt;/p&gt;
&lt;p&gt;At the time, I was building sites in &lt;a href="http://php.net/" title="Find out about PHP"&gt;PHP&lt;/a&gt;, and like every other
17 year-old learning PHP, I'd built entirely my own system for
managing the site.&lt;/p&gt;
&lt;p&gt;I'd experimented with Flash. I knew some JavaScript, and was
reasonably proficient in PHP (a skill that has since been burned from
my brain). As far as I was concerned websites were just combinations
of text, images and some degree of interactivity, so I could do
anything that was possible.&lt;/p&gt;
&lt;p&gt;It seems ridiculous now, of course. I didn't know anything about
caching, didn't know a thing about HTTP, or load balancers&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, or
deploying properly (apparently there's something wrong with
copy-pasting files around to live servers).&lt;/p&gt;
&lt;p&gt;Aside from a few years' more experience, two important things have
changed: I no longer work alone, and I've been training, from time to
time.&lt;/p&gt;
&lt;h2&gt;Working alone&lt;/h2&gt;
&lt;p&gt;Working alone meant I was always the smartest person in my team. My
ideas were always the best, and I was always the one to fix my
mistakes. No one ever disagreed with me, no one ever had a better
idea, no one ever pointed out why my idea was stupid.&lt;/p&gt;
&lt;p&gt;All that changed when I finished university and started work - people
pointed me at ways of solving problems that were in categories I'd
never even heard of.&lt;/p&gt;
&lt;p&gt;I started participating in &lt;a href="http://stackoverflow.com/users/20972/dominic-rodger" title="View my profile on Stack Overflow, a Q&amp;amp;A site for programmers"&gt;Stack Overflow&lt;/a&gt;, and gave
answers to questions where I thought I could. Sometimes the answers I
gave were good enough, sometimes other people posted better answers,
and I learned&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;All this is to say that I've learned how little I know by accidentally
surrounding myself with people who know better. If you think you're
smart, chances are you just haven't discovered all the things you
don't know yet.&lt;/p&gt;
&lt;h2&gt;Demonstrating my ignorance&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;It's amazing how much you find you don't know when you try to
explain something in detail to someone else. It can start a whole
new process of discovery. &amp;mdash; &lt;a href="http://blog.stackoverflow.com/2009/10/podcast-71/#comment-40649" title="Jon Skeet's comment on a Stack Overflow podcast"&gt;Jon Skeet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A few of the training sessions I run from time to time at work involve
live coding demonstrations. I open up Emacs, write some code, and then
show it running. Invariably someone will ask me what will happen if I
change &lt;em&gt;a&lt;/em&gt; to &lt;em&gt;b&lt;/em&gt;, and painfully frequently the answer is &lt;em&gt;"I'd never
thought of doing that, I've no idea"&lt;/em&gt;. So I make the change, run it,
and I try to piece together what's going on with everyone
watching. It's embarrassing, but maybe it's good that I'm able to so
quickly crush anyone's misperceptions that I know everything about
anything.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="http://www.oxygen-online.org" title="Find out about Oxygen"&gt;Oxygen's site&lt;/a&gt; has gone through several versions since I moved
  away in 2004 to start university. The wonderful Wayback Machine has
  a &lt;a href="http://web.archive.org/web/20041126110503/http://www.oxygen-online.org/"&gt;cache of the site&lt;/a&gt; from around that time.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;I still don't (since none of &lt;a href="http://www.dominicrodger.com/pages/about-me.html" title="See a list of the sites I currently run, if you're curious"&gt;my various sites&lt;/a&gt; get significant
  amounts of traffic), but hey, at least I know the categories of things
  which I know nothing about.&amp;#160;&lt;a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/users/20972/dominic-rodger" title="View my profile on Stack Overflow, a Q&amp;amp;A site for programmers"&gt;Stack Overflow&lt;/a&gt; was also a pretty good way to get better
  at writing, as &lt;a href="http://www.codinghorror.com/blog/2011/02/how-to-write-without-writing.html" title="Jeff Atwood on learning to write with Stack Overflow"&gt;others have said&lt;/a&gt;.&amp;#160;&lt;a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Getting Better at Testing</title><link href="http://dominicrodger.com/better-testing.html" rel="alternate"></link><updated>2012-04-12T19:18:00+01:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-04-12:better-testing.html</id><summary type="html">&lt;p&gt;I started with unit testing about 4 years ago. I started writing what were
probably integration tests, when I was working on the database backend of our
application. The tests I wrote were designed to make sure that our process
which saved data actually saved data. Saving data involved creating a document,
calling save on it, which would save it in the file system-based database,
which would hit the file system. Testing it was saved correctly meant calling
open on a document, which hit the database, which hit the file system.&lt;/p&gt;
&lt;h1&gt;I'm doing it wrong&lt;/h1&gt;
&lt;p&gt;A bit later, I came across this quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A test is not a unit test if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It talks to the database&lt;/li&gt;
&lt;li&gt;It communicates across the network&lt;/li&gt;
&lt;li&gt;It touches the file system&lt;/li&gt;
&lt;li&gt;It can't run at the same time as any of your other unit tests&lt;/li&gt;
&lt;li&gt;You have to do special things to your environment (such as editing config
  files) to run it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;mdash; &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=126923" title="Read Michael Feathers' Unit Testing Rules"&gt;Michael Feathers: A Set of Unit Testing Rules&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hadn't done all those things, but most of my tests did at least 2 of them&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Regardless of the philosophical point of whether what I had written were unit
tests, there was a more fundamental problem: &lt;strong&gt;they were slow&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In order to set up the tests I had to create a database, and initialise its
schema. Then I had to repeatedly open and close the database, saving documents,
and checking they were saved correctly. At the end of the tests they had to
clear up the database.&lt;/p&gt;
&lt;h1&gt;Impatience&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;We will encourage you to develop the three great virtues of a programmer:
laziness, impatience, and hubris.&lt;br /&gt;
&amp;mdash; &lt;a href="http://en.wikipedia.org/wiki/Larry_Wall" title="The quote is from Programming Perl, by Larry Wall - go take a look at his Wikipedia profile"&gt;Larry Wall, Programming Perl&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Increasingly I was writing unit tests which I didn't bother to run during
development - they became another item on my check-list of things to do
before checking code in. If they failed, the specific thing I changed which
might have broken them might have been a while ago, making it hard to track
down.&lt;/p&gt;
&lt;p&gt;So a while ago I tried a strange experiment. I tried to build an entire
website&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; without opening a browser. I didn't quite make it (eventually I had
to open a browser to check that it looked reasonable), but I got all the models
and views built by writing tests for them&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Using a &lt;a href="http://www.dominicrodger.com/tdd-django-south.html" title="Read about a quick trick for making test runs in Django faster"&gt;quick trick&lt;/a&gt;, my app's test suite runs in 2.1s on my
machine, which meant that it was pretty easy to run tests before each
commit&lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;. Being able to specify &lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/#running-tests" title="Django Documentation for running just a subset of your unit tests"&gt;particular tests&lt;/a&gt; to
run makes test-driven development a practical possibility.&lt;/p&gt;
&lt;p&gt;And each time I start a project this way, with a basic set of tests, I find
that I'm more likely to write tests next time I work on it. The tests I write
help me be confident that any changes I make are good, and confidence helps me
get stuff done, and getting stuff done makes me happy.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Since writing those first tests, I've started working on a team which
  works on database technology, so avoiding talking to the database is
  pretty tricky, since if you've not talked to the database, you've not
  tested your code.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;The website was &lt;a href="http://ministrytoday.org.uk" title="Visit the Ministry Today site, a journal for Christian leaders"&gt;Ministry Today&lt;/a&gt;, if you're curious. The
  less kind amongst you might well suggest that it looks like a site which
  was built with design as an afterthought.&amp;#160;&lt;a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Most of the tests are part of &lt;a href="https://github.com/dominicrodger/django-magazine" title="Take a look at django-magazine, the main open source app behind Ministry Today"&gt;django-magazine&lt;/a&gt;, and
  you can see them on &lt;a href="https://github.com/dominicrodger/django-magazine/tree/master/magazine/tests" title="Browse the code for the tests of django-magazine"&gt;GitHub&lt;/a&gt;.&amp;#160;&lt;a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;I really ought to play around with &lt;a href="http://tech.yipit.com/2011/11/16/183772396/" title="Read about Django pre-commit hooks at the Yipit Django Blog."&gt;pre-commit hooks&lt;/a&gt;
  for this stuff some day.&amp;#160;&lt;a href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Starting with Pelican</title><link href="http://dominicrodger.com/pelican.html" rel="alternate"></link><updated>2012-04-07T09:39:00+01:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-04-07:pelican.html</id><summary type="html">&lt;h1&gt;A brief history of my (failed) blogs&lt;/h1&gt;
&lt;p&gt;In about 1998, I was building a website for a friend. The site was entirely
static. I'd already learned the hard way about the pain of trying to keep lots
of separate static HTML files visually consistent.&lt;/p&gt;
&lt;p&gt;To build the site, I used a system (whose name has since faded from memory)
which took as its input some template files, some files containing the
content, and combined them together to build a website. I'd run a script,
and FTP the resulting HTML to a server somewhere.&lt;/p&gt;
&lt;p&gt;Since then, I've tried various different things. I used &lt;a href="http://en.wikipedia.org/wiki/Greymatter_(software)" title="Read the history of Greymatter"&gt;Greymatter&lt;/a&gt;
for a while, and then mostly wrote my own - first in PHP, and then more
recently in Django. The only thing that all these blogs had in common was this:
I spent more time building the system than I ever spent using it.&lt;/p&gt;
&lt;h1&gt;Today&lt;/h1&gt;
&lt;p&gt;14 years after my first static site generator experience, I'm back. This time
I'm using &lt;a href="http://pelican.readthedocs.org/en/latest/" title="Find out about Pelican"&gt;Pelican&lt;/a&gt;, and hoping that the auto-reload stuff will make
writing easier - as I can write in &lt;a href="http://daringfireball.net/projects/markdown/" title="Find out about Markdown, a text-to-HTML tool for web writers by John Gruber"&gt;Markdown&lt;/a&gt;, and see the results
as they will be rendered live&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://pydanny.com/choosing-a-new-python-based-blog-engine.html" title="Read Daniel Greenfeld's entry on getting started with Pelican"&gt;pydanny&lt;/a&gt; for the tip about Pelican - it's been pretty
straightforward so far.&lt;/p&gt;
&lt;h2&gt;Customising Pelican&lt;/h2&gt;
&lt;p&gt;The only changes I've really made to Pelican are to the CSS (&lt;a href="https://github.com/dominicrodger/dominicrodger.com/commit/61e81d568087a92e2bb41dc619966075566fb81e"&gt;fixing up the
code style&lt;/a&gt;, because I don't much like the default monospace font,
and &lt;a href="https://github.com/dominicrodger/dominicrodger.com/commit/54d99084c8b6777cd77c31fe1157718fc1a612b7"&gt;modifying the footnote link style&lt;/a&gt;). I did that by just
copying the default theme into my directory (which I've called &lt;code&gt;plagiarism&lt;/code&gt;),
and modifying my call to re-compile my blog to:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;plagiarism&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Deploying Pelican&lt;/h2&gt;
&lt;p&gt;I use &lt;a href="http://www.webfaction.com/?affiliate=dominicrodger" title="Get hosted with WebFaction"&gt;WebFaction&lt;/a&gt; for all my sites, and whilst deploying was easy,
it wasn't entirely obvious that I did it the right way. WebFaction has a really
nice model for managing sites (&lt;a href="http://docs.webfaction.com/user-guide/websites.html" title="Read a bit about WebFaction's model for managing websites"&gt;domains, applications, and websites&lt;/a&gt;),
but Pelican didn't really fit into its model. Eventually I settled on creating
a Pelican installation in my root directory, and then used "Symbolic link to
static only app" with the path set to Pelican's output directory.&lt;/p&gt;
&lt;p&gt;I've added a cron job to my WebFaction account which just pulls from my public
GitHub repository, so any changes I push to &lt;a href="https://github.com/dominicrodger/dominicrodger.com" title="View this site's GitHub repository"&gt;GitHub&lt;/a&gt; get deployed to
the site without any intervention.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Sort of, anyway - I'm using an auto-refresh extension in Chrome, and
  using the &lt;a href="http://pelican.notmyidea.org/en/2.8/getting_started.html#autoreload"&gt;auto-reload functionality&lt;/a&gt; in Pelican, so I
  see updates every 5 seconds or so.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Starting Over</title><link href="http://dominicrodger.com/starting-over.html" rel="alternate"></link><updated>2012-04-07T07:58:00+01:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-04-07:starting-over.html</id><summary type="html">&lt;h1&gt;Please sir, can I start again?&lt;/h1&gt;
&lt;p&gt;Every once in a while, I want to start again.&lt;/p&gt;
&lt;p&gt;I currently have 6 different sites using Kal&amp;#233;o&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. The code is stored in
a private git repository, and synced out to 6 different places every time I
need to make a change.&lt;/p&gt;
&lt;p&gt;Most these changes are fairly simple, and upgrading each site looks roughly
like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;myvirtualenv/bin/activate
git pull
python manage.py migrate
python manage.py collectstatic
apache2/bin/restart
&lt;span class="c"&gt;# profit!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since this is all eminently scriptable, it's scripted, and I've got a quick
Python script on my desktop that SSHs to each site in turn, and updates them.&lt;/p&gt;
&lt;p&gt;The problem is, not every upgrade is that simple&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. In practice, I end up
having to run a few different commands - generally when I want to install new
dependencies&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1&gt;What I should have done&lt;/h1&gt;
&lt;p&gt;Kal&amp;#233;o is built with &lt;a href="https://www.djangoproject.com/" title="Read about Django, a Python web framework"&gt;Django&lt;/a&gt;, which has a
really nice system for &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/sites/" title="The Django Sites framework"&gt;dealing with multiple sites&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I should have used that, but back &lt;a href="http://stackoverflow.com/questions/744866/reverse-not-found-sending-request-context-in-from-templates" title="My first ever Django question on Stack Overflow"&gt;when I started&lt;/a&gt; in 2009 I
was just building something for my Church (and learning Django at the same
time), and it didn't occur to me that I might want to re-use it.&lt;/p&gt;
&lt;h1&gt;What I want to do&lt;/h1&gt;
&lt;p&gt;So now I have 6 different installations of Kal&amp;#233;o, and a maintenance
headache every time I want to make a significant change (e.g. switching
from Python 2.6 to Python 2.7, as I did recently).&lt;/p&gt;
&lt;p&gt;This maintenance headache makes me want to just throw it all away and start
again. I'd make it leaner - Kal&amp;#233;o's full of cruft that seemed like a good
idea at the time. I'd use the sites framework, so I could more easily manage
upgrades, and be able to spin up new sites quicker. I'd probably separate out
parts of it into apps, so other people could use just the parts of it they
need. I'd write better tests.&lt;/p&gt;
&lt;h1&gt;Why I don't&lt;/h1&gt;
&lt;p&gt;But then I remember that most of this code just works, and there's a better way
to do it. I can add tests for what I've already got. I can gradually pull apart
the dependencies I've got, and spin off parts of it into separate places. I can
get to where I want eventually, piece by piece.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Programmers are, in their hearts, architects, and the first thing they want
to do when they get to a site is to bulldoze the place flat and build
something grand. We're not excited by incremental renovation: tinkering,
improving, planting flower beds.
&amp;mdash; &lt;cite&gt;&lt;a href="http://www.joelonsoftware.com/articles/fog0000000069.html" title="Read Joel's article on throwing things away"&gt;Joel Spolsky: "Things you should never do"&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So tiny step by tiny step I'm getting my code to a better place, tiny refactor
by tiny refactor, and I'm doing it all without breaking anything (much).&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Some software I wrote for managing Church websites, which I'll write
  about another time.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;This is where I should probably be using something like &lt;a href="http://fabfile.org"&gt;Fabric&lt;/a&gt;,
  but I haven't got around to it yet.&amp;#160;&lt;a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;There's probably a better way of doing this - I'm using &lt;code&gt;pip&lt;/code&gt; and have a &lt;code&gt;requirements.txt&lt;/code&gt;
  file, but I don't want to re-install everything, I just want to install
  the things I haven't got installed.&amp;#160;&lt;a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Test-Driven Development with Django &amp; South</title><link href="http://dominicrodger.com/tdd-django-south.html" rel="alternate"></link><updated>2011-01-11T00:00:00+00:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2011-01-11:tdd-django-south.html</id><summary type="html">&lt;p&gt;I'd basically given up on attempting test-driven with Django, given
the project I'm currently working on uses models with a lot of
&lt;a href="http://south.aeracode.org" title="Find out about South, a tool for managing database migrations in Django."&gt;South&lt;/a&gt; migrations. Just building the database and running the
migrations could take a minute or so when running &lt;code&gt;manage.py test&lt;/code&gt;,
and resetting the database to a clean state meant the test suite would
take several minutes to run.&lt;/p&gt;
&lt;p&gt;I've had an idea in the back of my mind for a while, and today I
finally got around to making it work.&lt;/p&gt;
&lt;h1&gt;SQLite&lt;/h1&gt;
&lt;p&gt;When using SQLite, the test runner doesn't bother to actually hit the
filesystem, it
&lt;a href="http://docs.djangoproject.com/en/1.2/topics/testing/#the-test-database" title="Read the section of the Django docs about using SQLite's in memory model"&gt;just does the whole thing in memory&lt;/a&gt;, which is a
good deal quicker. Previously, I couldn't use SQLite, because South
doesn't like it (since SQLite doesn't support &lt;code&gt;ALTER TABLE&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;My realisation was that if I turned off South, I could use SQLite,
which I did with this rather hackish file called &lt;code&gt;test_settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;south&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test_database.db&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can then do a quick run of the test suite using:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;manage.py &lt;span class="nb"&gt;test&lt;/span&gt; --settings&lt;span class="o"&gt;=&lt;/span&gt;test_settings
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously, this doesn't run through my South migrations, which I
probably should do from time to time (especially when adding new
migrations). I can still test those with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;manage.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;since by default the test runner will hit my normal settings module,
which still has South in &lt;code&gt;INSTALLED_APPS&lt;/code&gt;, and which hits my MySQL
database.&lt;/p&gt;
&lt;h1&gt;The Results&lt;/h1&gt;
&lt;p&gt;With my &lt;code&gt;test_settings&lt;/code&gt;, I get the following output:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ran 121 tests in 3.218s&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With my default settings, I get:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ran 121 tests in 326.742s&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I run tests for a particular app (which is generally all I need to
do), that difference is 0.312s to 31.064s.&lt;/p&gt;
&lt;p&gt;That makes my test run approximately &lt;strong&gt;99% quicker&lt;/strong&gt;, and well within
what I consider an acceptable time to run every time I make small
changes to my code.&lt;/p&gt;</summary></entry></feed>