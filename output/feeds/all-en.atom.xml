<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>dominicrodger.com</title><link href="http://dominicrodger.com/" rel="alternate"></link><link href="http://dominicrodger.com/feeds/all-en.atom.xml" rel="self"></link><id>http://dominicrodger.com/</id><updated>2012-04-12T19:18:00+01:00</updated><entry><title>Getting Better at Testing</title><link href="http://dominicrodger.combetter-testing.html" rel="alternate"></link><updated>2012-04-12T19:18:00+01:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-04-12:better-testing.html</id><summary type="html">&lt;p&gt;I started with unit testing about 4 years ago. I started writing what were
probably integration tests, when I was working on the database backend of our
application. The tests I wrote were designed to make sure that our process
which saved data actually saved data. Saving data involved creating a document,
calling save on it, which would save it in the filesystem-based database,
which would hit the filesystem. Testing it was saved correctly meant calling
open on a document, which hit the database, which hit the filesystem.&lt;/p&gt;
&lt;h1&gt;I'm doing it wrong&lt;/h1&gt;
&lt;p&gt;A bit later, I came across this quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A test is not a unit test if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It talks to the database&lt;/li&gt;
&lt;li&gt;It communicates across the network&lt;/li&gt;
&lt;li&gt;It touches the file system&lt;/li&gt;
&lt;li&gt;It can't run at the same time as any of your other unit tests&lt;/li&gt;
&lt;li&gt;You have to do special things to your environment (such as editing config
  files) to run it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;mdash; &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=126923" title="Read Michael Feathers' Unit Testing Rules"&gt;Michael Feathers: A Set of Unit Testing Rules&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hadn't done all those things, but most of my tests did at least 2 of them&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Regardless of the philosophical point of whether what I had written were unit
tests, there was a more fundamental problem: &lt;strong&gt;they were slow&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In order to set up the tests I had to create a database, and initialise its
schema. Then I had to repeatedly open and close the database, saving documents,
and checking they were saved correctly. At the end of the tests they had to
clear up the database.&lt;/p&gt;
&lt;h1&gt;Impatience&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;We will encourage you to develop the three great virtues of a programmer:
laziness, impatience, and hubris.&lt;br /&gt;
&amp;mdash; &lt;a href="http://en.wikipedia.org/wiki/Larry_Wall" title="The quote is from Programming Perl, by Larry Wall - go take a look at his Wikipedia profile"&gt;Larry Wall, Programming Perl&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Increasingly I was writing unit tests which I didn't bother to run during
development - they became another item on my check-list of things to do
before checking code in. If they failed, the specific thing I changed which
might have broken them might have been a while ago, making it hard to track
down.&lt;/p&gt;
&lt;p&gt;So a while ago I tried a strange experiment. I tried to build an entire
website&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; without opening a browser. I didn't quite make it (eventually I had
to open a browser to check that it looked reasonable), but I got all the models
and views built by writing tests for them&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Using a &lt;a href="http://www.dominicrodger.com/tdd-django-south.html" title="Read about a quick trick for making test runs in Django faster"&gt;quick trick&lt;/a&gt;, my app's test suite runs in 2.1s on my
machine, which meant that it was pretty easy to run tests before each
commit&lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;. Being able to specify &lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/#running-tests" title="Django Documentation for running just a subset of your unit tests"&gt;particular tests&lt;/a&gt; to
run makes test-driven development a practical possibility.&lt;/p&gt;
&lt;p&gt;And each time I start a project this way, with a basic set of tests, I find
that I'm more likely to write tests next time I work on it. The tests I write
help me be confident that any changes I make are good, and confidence helps me
get stuff done, and getting stuff done makes me happy.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Since writing those first tests, I've started working on a team which
  works on database technology, so avoiding talking to the database is
  pretty tricky, since if you've not talked to the database, you've not
  tested your code.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;The website was &lt;a href="http://ministrytoday.org.uk" title="Visit the Ministry Today site, a journal for Christian leaders"&gt;Ministry Today&lt;/a&gt;, if you're curious. The
  less kind amongst you might well suggest that it looks like a site which
  was built with design as an afterthought.&amp;#160;&lt;a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Most of the tests are part of &lt;a href="https://github.com/dominicrodger/django-magazine" title="Take a look at django-magazine, the main open source app behind Ministry Today"&gt;django-magazine&lt;/a&gt;, and
  you can see them on &lt;a href="https://github.com/dominicrodger/django-magazine/tree/master/magazine/tests" title="Browse the code for the tests of django-magazine"&gt;GitHub&lt;/a&gt;.&amp;#160;&lt;a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;I really ought to play around with &lt;a href="http://tech.yipit.com/2011/11/16/183772396/" title="Read about Django pre-commit hooks at the Yipit Django Blog."&gt;pre-commit hooks&lt;/a&gt;
  for this stuff some day.&amp;#160;&lt;a href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Starting with Pelican</title><link href="http://dominicrodger.compelican.html" rel="alternate"></link><updated>2012-04-07T09:39:00+01:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-04-07:pelican.html</id><summary type="html">&lt;h1&gt;A brief history of my (failed) blogs&lt;/h1&gt;
&lt;p&gt;In about 1998, I was building a website for a friend. The site was entirely
static. I'd already learned the hard way about the pain of trying to keep lots
of separate static HTML files visually consistent.&lt;/p&gt;
&lt;p&gt;To build the site, I used a system (whose name has since faded from memory)
which took as its input some template files, some files containing the
content, and combined them together to build a website. I'd run a script,
and FTP the resulting HTML to a server somewhere.&lt;/p&gt;
&lt;p&gt;Since then, I've tried various different things. I used &lt;a href="http://en.wikipedia.org/wiki/Greymatter_(software)" title="Read the history of Greymatter"&gt;Greymatter&lt;/a&gt;
for a while, and then mostly wrote my own - first in PHP, and then more
recently in Django. The only thing that all these blogs had in common was this:
I spent more time building the system than I ever spent using it.&lt;/p&gt;
&lt;h1&gt;Today&lt;/h1&gt;
&lt;p&gt;14 years after my first static site generator experience, I'm back. This time
I'm using &lt;a href="http://pelican.readthedocs.org/en/latest/" title="Find out about Pelican"&gt;Pelican&lt;/a&gt;, and hoping that the auto-reload stuff will make
writing easier - as I can write in &lt;a href="http://daringfireball.net/projects/markdown/" title="Find out about Markdown, a text-to-HTML tool for web writers by John Gruber"&gt;Markdown&lt;/a&gt;, and see the results
as they will be rendered live&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://pydanny.com/choosing-a-new-python-based-blog-engine.html" title="Read Daniel Greenfeld's entry on getting started with Pelican"&gt;pydanny&lt;/a&gt; for the tip about Pelican - it's been pretty
straightforward so far.&lt;/p&gt;
&lt;h2&gt;Customising Pelican&lt;/h2&gt;
&lt;p&gt;The only changes I've really made to Pelican are to the CSS (&lt;a href="https://github.com/dominicrodger/dominicrodger.com/commit/61e81d568087a92e2bb41dc619966075566fb81e"&gt;fixing up the
code style&lt;/a&gt;, because I don't much like the default monospace font,
and &lt;a href="https://github.com/dominicrodger/dominicrodger.com/commit/54d99084c8b6777cd77c31fe1157718fc1a612b7"&gt;modifying the footnote link style&lt;/a&gt;). I did that by just
copying the default theme into my directory (which I've called &lt;code&gt;plagiarism&lt;/code&gt;),
and modifying my call to re-compile my blog to:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;plagiarism&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Deploying Pelican&lt;/h2&gt;
&lt;p&gt;I use &lt;a href="http://www.webfaction.com/?affiliate=dominicrodger" title="Get hosted with WebFaction"&gt;WebFaction&lt;/a&gt; for all my sites, and whilst deploying was easy,
it wasn't entirely obvious that I did it the right way. WebFaction has a really
nice model for managing sites (&lt;a href="http://docs.webfaction.com/user-guide/websites.html" title="Read a bit about WebFaction's model for managing websites"&gt;domains, applications, and websites&lt;/a&gt;),
but Pelican didn't really fit into its model. Eventually I settled on creating
a Pelican installation in my root directory, and then used "Symbolic link to
static only app" with the path set to Pelican's output directory.&lt;/p&gt;
&lt;p&gt;I've added a cron job to my WebFaction account which just pulls from my public
GitHub repository, so any changes I push to &lt;a href="https://github.com/dominicrodger/dominicrodger.com" title="View this site's GitHub repository"&gt;GitHub&lt;/a&gt; get deployed to
the site without any intervention.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Sort of, anyway - I'm using an auto-refresh extension in Chrome, and
  using the &lt;a href="http://pelican.notmyidea.org/en/2.8/getting_started.html#autoreload"&gt;auto-reload functionality&lt;/a&gt; in Pelican, so I
  see updates every 5 seconds or so.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Starting Over</title><link href="http://dominicrodger.comstarting-over.html" rel="alternate"></link><updated>2012-04-07T07:58:00+01:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2012-04-07:starting-over.html</id><summary type="html">&lt;h1&gt;Please sir, can I start again?&lt;/h1&gt;
&lt;p&gt;Every once in a while, I want to start again.&lt;/p&gt;
&lt;p&gt;I currently have 6 different sites using Kal&amp;#233;o&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. The code is stored in
a private git repository, and synced out to 6 different places every time I
need to make a change.&lt;/p&gt;
&lt;p&gt;Most these changes are fairly simple, and upgrading each site looks roughly
like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;myvirtualenv/bin/activate
git pull
python manage.py migrate
python manage.py collectstatic
apache2/bin/restart
&lt;span class="c"&gt;# profit!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since this is all eminently scriptable, it's scripted, and I've got a quick
Python script on my desktop that SSHs to each site in turn, and updates them.&lt;/p&gt;
&lt;p&gt;The problem is, not every upgrade is that simple&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. In practice, I end up
having to run a few different commands - generally when I want to install new
dependencies&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1&gt;What I should have done&lt;/h1&gt;
&lt;p&gt;Kal&amp;#233;o is built with &lt;a href="https://www.djangoproject.com/" title="Read about Django, a Python web framework"&gt;Django&lt;/a&gt;, which has a
really nice system for &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/sites/" title="The Django Sites framework"&gt;dealing with multiple sites&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I should have used that, but back &lt;a href="http://stackoverflow.com/questions/744866/reverse-not-found-sending-request-context-in-from-templates" title="My first ever Django question on Stack Overflow"&gt;when I started&lt;/a&gt; in 2009 I
was just building something for my Church (and learning Django at the same
time), and it didn't occur to me that I might want to re-use it.&lt;/p&gt;
&lt;h1&gt;What I want to do&lt;/h1&gt;
&lt;p&gt;So now I have 6 different installations of Kal&amp;#233;o, and a maintenance
headache every time I want to make a significant change (e.g. switching
from Python 2.6 to Python 2.7, as I did recently).&lt;/p&gt;
&lt;p&gt;This maintenance headache makes me want to just throw it all away and start
again. I'd make it leaner - Kal&amp;#233;o's full of cruft that seemed like a good
idea at the time. I'd use the sites framework, so I could more easily manage
upgrades, and be able to spin up new sites quicker. I'd probably separate out
parts of it into apps, so other people could use just the parts of it they
need. I'd write better tests.&lt;/p&gt;
&lt;h1&gt;Why I don't&lt;/h1&gt;
&lt;p&gt;But then I remember that most of this code just works, and there's a better way
to do it. I can add tests for what I've already got. I can gradually pull apart
the dependencies I've got, and spin off parts of it into separate places. I can
get to where I want eventually, piece by piece.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Programmers are, in their hearts, architects, and the first thing they want
to do when they get to a site is to bulldoze the place flat and build
something grand. We're not excited by incremental renovation: tinkering,
improving, planting flower beds.
&amp;mdash; &lt;cite&gt;&lt;a href="http://www.joelonsoftware.com/articles/fog0000000069.html" title="Read Joel's article on throwing things away"&gt;Joel Spolsky: "Things you should never do"&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So tiny step by tiny step I'm getting my code to a better place, tiny refactor
by tiny refactor, and I'm doing it all without breaking anything (much).&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Some software I wrote for managing Church websites, which I'll write
  about another time.&amp;#160;&lt;a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;This is where I should probably be using something like &lt;a href="http://fabfile.org"&gt;Fabric&lt;/a&gt;,
  but I haven't got around to it yet.&amp;#160;&lt;a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;There's probably a better way of doing this - I'm using &lt;code&gt;pip&lt;/code&gt; and have a &lt;code&gt;requirements.txt&lt;/code&gt;
  file, but I don't want to re-install everything, I just want to install
  the things I haven't got installed.&amp;#160;&lt;a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Test-Driven Development with Django &amp; South</title><link href="http://dominicrodger.comtdd-django-south.html" rel="alternate"></link><updated>2011-01-11T00:00:00+00:00</updated><author><name>Dominic Rodger</name></author><id>tag:dominicrodger.com,2011-01-11:tdd-django-south.html</id><summary type="html">&lt;p&gt;I'd basically given up on attempting test-driven with Django, given
the project I'm currently working on uses models with a lot of
&lt;a href="http://south.aeracode.org" title="Find out about South, a tool for managing database migrations in Django."&gt;South&lt;/a&gt; migrations. Just building the database and running the
migrations could take a minute or so when running &lt;code&gt;manage.py test&lt;/code&gt;,
and resetting the database to a clean state meant the test suite would
take several minutes to run.&lt;/p&gt;
&lt;p&gt;I've had an idea in the back of my mind for a while, and today I
finally got around to making it work.&lt;/p&gt;
&lt;h1&gt;SQLite&lt;/h1&gt;
&lt;p&gt;When using SQLite, the test runner doesn't bother to actually hit the
filesystem, it
&lt;a href="http://docs.djangoproject.com/en/1.2/topics/testing/#the-test-database" title="Read the section of the Django docs about using SQLite's in memory model"&gt;just does the whole thing in memory&lt;/a&gt;, which is a
good deal quicker. Previously, I couldn't use SQLite, because South
doesn't like it (since SQLite doesn't support &lt;code&gt;ALTER TABLE&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;My realisation was that if I turned off South, I could use SQLite,
which I did with this rather hackish file called &lt;code&gt;test_settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;south&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test_database.db&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can then do a quick run of the test suite using:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;manage.py &lt;span class="nb"&gt;test&lt;/span&gt; --settings&lt;span class="o"&gt;=&lt;/span&gt;test_settings
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously, this doesn't run through my South migrations, which I
probably should do from time to time (especially when adding new
migrations). I can still test those with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;manage.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;since by default the test runner will hit my normal settings module,
which still has South in &lt;code&gt;INSTALLED_APPS&lt;/code&gt;, and which hits my MySQL
database.&lt;/p&gt;
&lt;h1&gt;The Results&lt;/h1&gt;
&lt;p&gt;With my &lt;code&gt;test_settings&lt;/code&gt;, I get the following output:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ran 121 tests in 3.218s&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With my default settings, I get:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ran 121 tests in 326.742s&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I run tests for a particular app (which is generally all I need to
do), that difference is 0.312s to 31.064s.&lt;/p&gt;
&lt;p&gt;That makes my test run approximately &lt;strong&gt;99% quicker&lt;/strong&gt;, and well within
what I consider an acceptable time to run every time I make small
changes to my code.&lt;/p&gt;</summary></entry></feed>